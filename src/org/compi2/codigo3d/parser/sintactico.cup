package org.compi2.codigo3d.parser;
import java_cup.runtime.Symbol;

parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL, IGUAL, DIFERENTE;
terminal TokenC3D AND, OR, NOT;
nonterminal NodoC3D inicial, expresion, rel, cond;
nonterminal String OPREL;


precedence left OR;
precedence left AND;
precedence right NOT;
precedence left IGUAL, DIFERENTE, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} cond:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("\n//Ãšltimo valor: " + exp.getCad());
                        ControlC3D.agregarC3D("\n//Etiquetas verdaderas:\n" + exp.printLvs());
                        ControlC3D.agregarC3D("\n//Etiquetas falsas:\n" + exp.printLfs());
                    :};

cond        ::= cond:izq OR {:ControlC3D.agregarC3D(izq.printLfs());:} cond:der
                    {: 
                        RESULT = new NodoC3D(izq.unirLvs(der.getLvs()), der.getLfs());
                    :}
            
            | cond:izq AND {:ControlC3D.agregarC3D(izq.printLvs());:} cond:der
                    {: 
                        RESULT = new NodoC3D(der.getLvs(), izq.unirLfs(der.getLfs()));
                    :}
                    
            |   NOT rel:exp 
                    {:
                        RESULT = new NodoC3D(exp.getLfs(), exp.getLvs()); 
                    :}
            | rel:r {:RESULT = r;:};



rel         ::= expresion:izq OPREL:op expresion:der
                    {: 
                        String lv = ControlC3D.generaEtq();
                        String lf = ControlC3D.generaEtq();

                        String c3d = "    if " + izq.getCad() + " " + op + " " + der.getCad() + " then goto " + lv + "\n";
                        c3d += "    goto " + lf + "\n";

                        ControlC3D.agregarC3D(c3d);

                        RESULT = new NodoC3D(lv, lf);
                    :}
                |expresion:exp {:RESULT = exp;:};



expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = "    " + temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = "    " + temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = "    " + temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = "    " + temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = "    " + temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = "    " + temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ cond:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;

OPREL ::= IGUAL         {: RESULT = "==";:} 
        | DIFERENTE     {: RESULT = "!=";:}
        | MAYOR         {: RESULT = ">";:}
        | MENOR         {: RESULT = "<";:}
        | MAYOR_IGUAL   {: RESULT = ">=";:}
        | MENOR_IGUAL   {: RESULT = "<=";:};
